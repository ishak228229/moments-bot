import telebot
import datetime
from functions import typing, start_buttons, friends_menu, profile_menu, accept_friend
from conn import connection, cursor
from config import bot
import hashlib
from PIL import Image
from io import BytesIO
import time
from keep_alive import keep_alive

keep_alive()


@bot.message_handler(commands=['start'])
def start(message):
  cursor.execute(
      "CREATE TABLE IF NOT EXISTS users (id int AUTO_INCREMENT, username varchar(32), password varchar(32), image longblob, description varchar(100), join_date varchar(32), friends longtext, _id varchar(32), PRIMARY KEY(id))"
  )
  cursor.execute(
      "CREATE TABLE IF NOT EXISTS posts (id int AUTO_INCREMENT, username varchar(32), image longblob, description varchar(100), date varchar(32), PRIMARY KEY(id))"
  )
  connection.commit()

  cht = message.chat.id
  username = message.from_user.username

  if username == None:
    bot.send_message(
        cht,
        '–°—Ö–æ–∂–µ, —É —Ç–µ–±–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–µ <b>–Ü–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</b>\n–ô–æ–≥–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤—ñ—Å–æ–º'
    )
  else:
    cursor.execute("SELECT * FROM users WHERE username = %s", (username))
    data = cursor.fetchall()

    if len(data) == 0:
      time_now = datetime.datetime.now()
      date = time_now.strftime('%d.%m.%Y, %H:%M:%S')

      cursor.execute(
          "INSERT INTO users (username, join_date, _id) VALUES (%s, %s, %s)",
          (username, date, cht))
      connection.commit()

      bot.send_message(
          cht,
          '–ü—Ä–∏–≤—ñ—Ç üëã\n–ì–∞–π–¥–∞ —Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å —Ç–∞ –¥—ñ–ª–∏—Ç—Å—å –Ω–∞–π—è—Å–∫—Ä–∞–≤—ñ—à–∏–º–∏ –º–æ–º–µ—Ç–∞–º–∏ –∑ –¥—Ä—É–∑—è–º–∏ üì∏'
      )
      msg = bot.send_message(
          cht, '–î–∞–≤–∞–π –∑–∞–ø–æ–≤–Ω–∏–º–æ –ø—Ä–æ—Ñ—ñ–ª—å!\n–ù–∞–¥—ñ—à–ª–∏ –≥–∞—Ä–Ω–µ–Ω—å–∫—É –∞–≤–∞—Ç–∞—Ä–∫—É ;)')
      bot.register_next_step_handler(msg, get_avatar)
    else:
      bot.send_message(cht,
                       '–ü—Ä–∏–≤—ñ—Ç üëã\n–ü—É–±–ª—ñ–∫—É—î–º–æ –Ω–æ–≤–µ —Ñ–æ—Ç–æ?)',
                       reply_markup=start_buttons())


def get_avatar(message):
  cht = message.chat.id
  username = message.from_user.username

  try:
    file_id = message.photo[-1].file_id
    file_info = bot.get_file(file_id)
    file_path = file_info.file_path

    downloaded_file = bot.download_file(file_path)

    image = Image.open(BytesIO(downloaded_file))
    width, height = image.size

    aspect_ratio = width / height
    valid_aspect_ratios = [1 / 1]
    if aspect_ratio not in valid_aspect_ratios:
      raise ValueError(
          "–§–æ—Ç–æ –º–∞—î –º–∞—Ç–∏ —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω 1:1\n–û–±—Ä—ñ–∂ –π–æ–≥–æ —Ç–∞ —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ üòâ"
      )

    cursor.execute("UPDATE users SET image = %s WHERE username = %s",
                   (downloaded_file, username))
    connection.commit()

    bot.send_message(cht, '–õ—é–∫—Å üòª\n–†—É—Ö–∞—î–º–æ—Å—å –¥–∞–ª—ñ!')
    msg = bot.send_message(cht,
                           '–ü—Ä–∏–¥—É–º–∞–π –ø–∞—Ä–æ–ª—å üîí\n–ù—ñ–∫–æ–º—É –Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª—è–π –π–æ–≥–æ ü§´')
    bot.register_next_step_handler(msg, get_password)
    # bot.send_message(cht, '–¢–µ–ø–µ—Ä –Ω–∞–ø–∏—à–∏ —è–∫–∏–π-–Ω–µ–±—É–¥—å –æ–ø–∏—Å üí¨\n–†–æ–∑–∫–∞–∂–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Ö—Ç–æ —Ç–∏/—â–æ –±—É–¥–µ—à –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏...', get_description)
  except ValueError as ve:
    msg = bot.send_message(
        cht,
        '–§–æ—Ç–æ –º–∞—î –±—É—Ç–∏ –∑—ñ —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è–º 1:1. –û–±—Ä—ñ–∂ –π–æ–≥–æ —Ç–∞ —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ üòâ')
    bot.register_next_step_handler(msg, get_photo_post)
  except Exception as ex:
    msg = bot.send_message(cht,
                           '–•–∞–ª–µ–ø–∞! –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑, –∞–±–æ –∑–≤–µ—Ä–Ω–∏—Å—å —É –ø—ñ–¥—Ç—Ä–∏–º–∫—É')
    bot.register_next_step_handler(msg, get_photo_post)


def get_password(message):
  cht = message.chat.id
  password = message.text
  hash = hashlib.md5()
  hash.update(password.encode())
  password_hash = hash.hexdigest()

  username = message.from_user.username

  try:
    cursor.execute("UPDATE users SET password = %s WHERE username = %s",
                   (password_hash, username))
    connection.commit()

    bot.send_message(cht, '–õ—é–∫—Å üòª\n–†—É—Ö–∞—î–º–æ—Å—å –¥–∞–ª—ñ!')
    msg = bot.send_message(
        cht,
        '–¢–µ–ø–µ—Ä –Ω–∞–ø–∏—à–∏ —è–∫–∏–π-–Ω–µ–±—É–¥—å –æ–ø–∏—Å üí¨\n–†–æ–∑–∫–∞–∂–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Ö—Ç–æ —Ç–∏/—â–æ –±—É–¥–µ—à –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏...'
    )
    bot.register_next_step_handler(msg, get_description)
  except Exception as ex:
    msg = bot.send_message(
        cht, f'–•–∞–ª–µ–ø–∞! –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑, –∞–±–æ –∑–≤–µ—Ä–Ω–∏—Å—å —É –ø—ñ–¥—Ç—Ä–∏–º–∫—É\n{ex}')
    bot.register_next_step_handler(msg, get_password)


def get_description(message):
  cht = message.chat.id
  username = message.from_user.username
  description = message.text

  try:
    cursor.execute("UPDATE users SET description = %s WHERE username = %s",
                   (description, username))
    connection.commit()

    bot.send_message(cht,
                     '–°—É–ø–µ—Ä üëç\n–£—Å–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è –ø–µ—Ä—à–æ—ó –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó üòâ',
                     reply_markup=start_buttons())
  except Exception as ex:
    msg = bot.send_message(cht,
                           '–•–∞–ª–µ–ø–∞! –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑, –∞–±–æ –∑–≤–µ—Ä–Ω–∏—Å—å —É –ø—ñ–¥—Ç—Ä–∏–º–∫—É')
    bot.register_next_step_handler(msg, get_description)


def get_photo_post(message):
  cht = message.chat.id
  username = message.from_user.username

  try:
    file_id = message.photo[-1].file_id
    file_info = bot.get_file(file_id)
    file_path = file_info.file_path

    downloaded_file = bot.download_file(file_path)

    image = Image.open(BytesIO(downloaded_file))
    width, height = image.size

    aspect_ratio = width / height
    valid_aspect_ratios = [1 / 1, 3 / 4, 16 / 9, 4 / 3]
    if aspect_ratio not in valid_aspect_ratios:
      raise ValueError(
          "–§–æ—Ç–æ –º–∞—î –º–∞—Ç–∏ —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω 1:1, 3:4, 16:9 –∞–±–æ 4:3\n–û–±—Ä—ñ–∂ –π–æ–≥–æ —Ç–∞ —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ üòâ"
      )

    time_now = datetime.datetime.now()
    date = time_now.strftime('%d.%m.%Y, %H:%M:%S')

    cursor.execute(
        "INSERT INTO posts (username, image, date) VALUES (%s, %s, %s)",
        (username, downloaded_file, date))
    connection.commit()

    bot.send_message(cht, '–°—É–ø–µ—Ä üòª')
    msg = bot.send_message(cht, '–¢–µ–ø–µ—Ä –Ω–∞–ø–∏—à–∏ —è–∫–∏–π—Å—å –æ–ø–∏—Å –¥–æ —Ñ–æ—Ç–æ üí¨')
    bot.register_next_step_handler(msg, get_description_post, date)
  except ValueError as ve:
    msg = bot.send_message(
        cht,
        '–§–æ—Ç–æ –º–∞—î –±—É—Ç–∏ –∑—ñ —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è–º 1:1, 3:4, 16:9 –∞–±–æ 4:3. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∑ —ñ–Ω—à–∏–º —Ñ–æ—Ç–æ.'
    )
    bot.register_next_step_handler(msg, get_photo_post)
  except Exception as ex:
    msg = bot.send_message(cht,
                           '–•–∞–ª–µ–ø–∞! –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑, –∞–±–æ –∑–≤–µ—Ä–Ω–∏—Å—å —É –ø—ñ–¥—Ç—Ä–∏–º–∫—É')
    bot.register_next_step_handler(msg, get_photo_post)


def get_description_post(message, date_):
  cht = message.chat.id
  description = message.text

  date = date_

  if description:
    try:
      cursor.execute("UPDATE posts SET description = %s WHERE date = %s",
                     (description, date))
      connection.commit()

      bot.send_message(cht,
                       '–°—É–ø–µ—Ä üëç\n–§–æ—Ç–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–µ, –ø–µ—Ä–µ–≥–ª—è–Ω—å –π–æ–≥–æ —É –ø—Ä–æ—Ñ—ñ–ª—ñ',
                       reply_markup=start_buttons())
    except Exception as ex:
      msg = bot.send_message(
          cht, f'–•–∞–ª–µ–ø–∞! –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑, –∞–±–æ –∑–≤–µ—Ä–Ω–∏—Å—å —É –ø—ñ–¥—Ç—Ä–∏–º–∫—É')
      bot.register_next_step_handler(msg, get_description_post, date)
  else:
    msg = bot.send_message(
        cht, f'–•–∞–ª–µ–ø–∞! –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑, –∞–±–æ –∑–≤–µ—Ä–Ω–∏—Å—å —É –ø—ñ–¥—Ç—Ä–∏–º–∫—É')
    bot.register_next_step_handler(msg, get_description_post, date)


def get_friends(message):
  cht = message.chat.id
  username = message.from_user.username
  friend_name = message.text

  cursor.execute("SELECT * FROM users WHERE username = %s", (friend_name))
  data = cursor.fetchall()

  if len(data) > 0:
    id_ = data[0][7]

    cursor.execute("SELECT friends FROM users WHERE username = %s", (username))
    data2 = cursor.fetchone()

    data_list = data2[0].split(',')
    if friend_name not in data_list:
      added_friend = f'{data2[0]},{friend_name}'

      cursor.execute("UPDATE users SET friends = %s WHERE username = %s",
                     (added_friend, username))
      connection.commit()

      bot.send_message(cht,
                       f'–¢–∏ –ø–æ—á–∞–≤ —Å—Ç–µ–∂–∏—Ç–∏ –∑–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º @{friend_name}',
                       reply_markup=friends_menu())
      msg = bot.send_message(id_,
                             f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {username} –ø–æ—á–∞–≤ —Å—Ç–µ–∂–∏—Ç–∏ –∑–∞ —Ç–æ–±–æ—é',
                             reply_markup=accept_friend())
      bot.register_next_step_handler(msg, accept, username, friend_name, id_,
                                     cht)
    else:
      bot.send_message(cht,
                       f'–¢–∏ –≤–∂–µ —Å—Ç–µ–∂–∏—à –∑–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º @{friend_name}',
                       reply_markup=friends_menu())
  else:
    msg = bot.send_message(cht, '–¢–∞–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ —ñ—Å–Ω—É—î, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑')
    bot.register_next_step_handler(msg, get_friends)


def accept(message, username, friend_name, id_, cht):
  if message.text == '–°—Ç–µ–∂–∏—Ç–∏ ‚úÖ':
    cursor.execute("SELECT friends FROM users WHERE username = %s",
                   (friend_name))
    data2 = cursor.fetchone()
    added_friend = f'{data2[0]},{username}'

    cursor.execute("UPDATE users SET friends = %s WHERE username = %s",
                   (added_friend, friend_name))
    connection.commit()

    cursor.execute("SELECT friends FROM users WHERE username = %s",
                   (friend_name))
    f1 = cursor.fetchone()
    f1 = f1[0].split(',')
    cursor.execute("SELECT friends FROM users WHERE username = %s", (username))
    f2 = cursor.fetchone()
    f2 = f2[0].split(',')

    if friend_name in f2 and username in f1:
      bot.send_message(
          cht,
          f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{friend_name} –ø–æ—á–∞–≤ —Å—Ç–µ–∂–∏—Ç–∏ –∑–∞ —Ç–æ–±–æ—é\n–¢–µ–ø–µ—Ä –≤–∏ –¥—Ä—É–∑—ñ ü§ô',
          reply_markup=start_buttons())
      bot.send_message(
          id_,
          f'–¢–∏ –ø–æ—á–∞–≤ —Å—Ç–µ–∂–∏—Ç–∏ –∑–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º @{username}\n–¢–µ–ø–µ—Ä –≤–∏ –¥—Ä—É–∑—ñ ü§ô',
          reply_markup=start_buttons())
  elif message.text == '–ù–µ —Å—Ç–µ–∂–∏—Ç–∏ ‚ùå':
    ...


@bot.message_handler(content_types=['text'])
def text(message: telebot.types.Message) -> None:
  cht = message.chat.id
  username = message.from_user.username

  if message.text == '‚ûï':
    msg = bot.send_message(
        cht,
        '–ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ, —è–∫–µ –±—É–¥–µ–º–æ –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ üöÄ\n–í—Ä–∞—Ö—É–π, —â–æ —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω –º–∞—î –±—É—Ç–∏ 1:1, 3:4, 16:9 –∞–±–æ 4:3',
        reply_markup=telebot.types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, get_photo_post)
  elif message.text == '–ü—Ä–æ—Ñ—ñ–ª—å üë§':
    cursor.execute("SELECT * FROM users WHERE username = %s", (username))
    data = cursor.fetchone()
    cursor.execute("SELECT * FROM posts WHERE username = %s", (username))
    data2 = cursor.fetchall()
    bot.send_photo(cht,
                   photo=data[3],
                   caption=f'<b>@{data[1]}</b>\n' +
                   f'<blockquote><b>{data[4]}</b></blockquote>\n' +
                   f'<i>–û–ø—É–±–ª–∫–æ–≤–∞–Ω–æ:</i> <b>{len(data2)}</b> –ø–æ—Å—Ç—ñ–≤\n' +
                   f'<i>–ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è:</i> <b>{data[5]}</b>',
                   parse_mode='HTML',
                   reply_markup=profile_menu())

  elif message.text == '–î—Ä—É–∑—ñ ü§ù':
    bot.send_message(cht, '–û–±–µ—Ä–∏ –¥—ñ—é:', reply_markup=friends_menu())
  elif message.text == '–î–æ–¥–∞—Ç–∏ –¥—Ä—É–∑—ñ–≤ üîç':
    msg = bot.send_message(cht,
                           '–í–≤–µ–¥–∏ —ñ–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞',
                           reply_markup=telebot.types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, get_friends)
  elif message.text == '–ú–æ—ó –¥—Ä—É–∑—ñ üë•':
    cursor.execute("SELECT friends FROM users WHERE username = %s", (username))
    data = cursor.fetchone()

    if data[0] == None:
      bot.send_message(cht, '–£ —Ç–µ–±–µ –ø–æ–∫–∏ –Ω–µ–º–∞—î –¥—Ä—É–∑—ñ–≤')
    else:
      friends_list = data[0].split(',')
      friends = ''
      k = 0

      for f in friends_list:
        if f != '':
          k = k + 1
          friends += f'<b>{k}</b>. <a href="http://192.168.1.249/user?username={f}">@{f}</a>\n'

      bot.send_message(cht, friends, parse_mode='HTML')

  if message.text == '–ì–æ–ª–æ–≤–Ω–∞ üè†':
    bot.send_message(cht,
                     '–ü—Ä–∏–≤—ñ—Ç üëã\n–ü—É–±–ª—ñ–∫—É—î–º–æ –Ω–æ–≤–µ —Ñ–æ—Ç–æ?)',
                     reply_markup=start_buttons())

  if message.text == '–ú–æ—ó –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó üñº':
    cursor.execute("SELECT * FROM posts WHERE username = %s", (username))
    data = cursor.fetchall()


bot.polling()
